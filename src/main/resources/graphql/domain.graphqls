schema {
    query: Query
    mutation: Mutation
}

type Query {
    getUsers: [User]
    getUser(id: ID): User
    getUsersByProject(projectId: Int!): [User]

    getInitiatives: [Initiative]
    getInitiative(id: ID): Initiative

    getStories: [Story]
    getStory(id: ID): Story
    getStoriesByProject(projectId: Int!): [Story]

    getProjects: [Project]
    getProject(id: ID): Project
}

type Mutation {
    createInitiative(input: InitiativeInput): Initiative

    createUser(input: UserInput): User
    addProjectToUser(projectId: Int, userId: Int): User

    createStory(input: StoryInput): Story
    updateStory(input: StoryInput): Story

    createProject(input: ProjectInput): Project
    updateProject(input: ProjectInput): Project
}

type User {
    id: ID!
    name: String!
    username: String!
    email: String!
    password: String!
    project: Project
}

type Initiative {
    id: ID!
    name: String!
    details: String
    owner: User!
    status: String!
}

type Story {
    id: ID!
    name: String!
    details: String
    owner: User!
    status: String!
    points: Int
    project: Project
}

type Project {
    id: ID!
    name: String!
    description: String
    createdBy: User!
    createdOn: String
}

input UserInput {
    id: ID
    name: String
    username: String
    email: String
    password: String
}

input InitiativeInput {
    id: ID
    name: String
    details: String
    ownerId: Int
    status: String
}

input StoryInput {
    id: ID
    name: String
    details: String
    ownerId: Int
    status: String
    points: Int
    projectId: Int
}

input ProjectInput {
    id: ID
    name: String
    description: String
    createdById: Int
    createdOn: String
}